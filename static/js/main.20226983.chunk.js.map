{"version":3,"sources":["propTypes/userType.js","components/TodoList/TodoList.jsx","propTypes/todoType.js","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["userType","PropTypes","shape","id","number","isRequired","name","string","phone","email","TodoList","title","completed","bool","user","state","inputValue","selectValue","handleChange","event","target","value","setState","this","props","todos","selectUser","selectedUserId","selectedTodoId","filteredTodos","filter","todo","toLowerCase","includes","className","type","placeholder","onChange","map","key","classNames","checked","onClick","userId","React","Component","request","url","fetch","then","response","json","result","data","getUser","CurrentUser","loadUser","prevProps","clearUser","App","handleSelection","todoId","handleClear","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20226983.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport const userType = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  phone: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n});\n","import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport { todoType } from '../../propTypes/todoType';\n\nexport class TodoList extends React.Component {\n  state = {\n    inputValue: '',\n    selectValue: '',\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { todos, selectUser, selectedUserId, selectedTodoId } = this.props;\n    const { inputValue, selectValue } = this.state;\n\n    let filteredTodos = todos;\n\n    if (selectValue === 'active') {\n      filteredTodos = todos\n        .filter(todo => !todo.completed);\n    }\n\n    if (selectValue === 'completed') {\n      filteredTodos = todos\n        .filter(todo => todo.completed);\n    }\n\n    if (inputValue) {\n      filteredTodos = filteredTodos\n        .filter(todo => (\n          todo.title.toLowerCase().includes(inputValue.toLowerCase())\n        ));\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <form className=\"TodoList__form\">\n          <input\n            type=\"text\"\n            className=\"TodoList__input\"\n            placeholder=\"Type search word\"\n            name=\"inputValue\"\n            value={inputValue}\n            onChange={this.handleChange}\n          />\n\n          <select\n            name=\"selectValue\"\n            value={selectValue}\n            className=\"TodoList__select\"\n            onChange={this.handleChange}\n          >\n            <option value=\"all\">\n              Show all\n            </option>\n\n            <option value=\"active\">\n              Show active\n            </option>\n\n            <option value=\"completed\">\n              Show completed\n            </option>\n          </select>\n        </form>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={\n                  classNames('TodoList__item', {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  })\n                }\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onClick={!todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={\n                    classNames('TodoList__user-button button', {\n                      'TodoList__user-button--selected':\n                        todo.userId === selectedUserId\n                        && selectedTodoId === todo.id,\n                    })\n                  }\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(todo.userId, todo.id);\n                  }}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(todoType).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  selectedTodoId: PropTypes.number.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nimport { userType } from './userType';\n\nexport const todoType = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  user: userType.isRequired,\n});\n","const BASE_URL = 'https://mate-api.herokuapp.com/';\n\nconst request = url => fetch(`${BASE_URL}${url}`)\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const getTodos = () => request('todos')\n  .then(todos => todos.filter(item => item.title && item.userId));\n\nexport const getUser = userId => request(`users/${userId}`);\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../api';\nimport { userType } from '../../propTypes/userType';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { userId } = this.props;\n\n    if (prevProps.userId !== userId) {\n      this.loadUser();\n    }\n  }\n\n  async loadUser() {\n    const { userId } = this.props;\n\n    const user = await getUser(userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${user.id}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          type=\"button\"\n          className=\"CurrentUser__clear button\"\n          onClick={this.props.clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = userType.isRequired;\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    selectedTodoId: 0,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  handleSelection = (userId, todoId) => {\n    this.setState({\n      selectedUserId: userId,\n      selectedTodoId: todoId,\n    });\n  }\n\n  handleClear = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId, selectedTodoId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.handleSelection}\n            selectedUserId={selectedUserId}\n            selectedTodoId={selectedTodoId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.handleClear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}